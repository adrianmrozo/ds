Project Report 2


---------
Task 1
 

1.) We currently have 2 branches, that we treat as master file. The one called "main" is the default branch on github.
The other one called "master" contains the same information and needs to be set as default.
Repository Owner needs to follow the few simple steps in 
https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/changing-the-default-branch
CHECK

After we will have done that, we will delete the "main" branch.
CHECK

2.) Additionally there are two test branches. "testbranch" and "workon".
We want to delete the "testbranch" and keep "workon" as a testbranch.
CHECL

3.) Specification of the .gitignore file

All file types, respectively certain files within the local directory that are listed in the .gitignore file 
will be ignored when updating github to the status of the local directory. So we need to think about 
which files and filetypes we actually want to be displayed and shared on github. With our local directory 
growing (e.g. saving a trained CNN, adding text files with notes, ect.) and the premise to keep our respository 
nice and clean, we do not want all those newly added files to be uploaded into github.
Thus, with more and more files/file types to be stored locally and us not wanting those files to be shared, we have to 
update the .gitignore file on a regular basis.

In particular: 
- We ignore the our and all saved and trained CNN. We use: *.h5
- As specifically asked for in the instructions of this project, we want to avoid all pictures, video and music.
restict some file types representively. We use: for music: *.mp3, *.wav, *.flac 
                                                for videos: *.mp4, *.mov, *.wmv, *.avi, 
                                                for pictures: *.jpg, *.png, *.tiff, *.gif, *.raw

We already created a .gitignore file for Milestone 1. We copied the text and created via ```git touch``` a new 
textfile. We added some wildcards for additional file types. 
CHECK

Just upload the gitignore to workon.
CHECK BUT:
-------TODO
delete the folder and re-upload the gitignore and the project report. Don't know why that happened.



5.) Versioncontrol of the .gitignore - strategy
Use 4 branches within the repository: Master, workon_shared, user_1, user_2
Like this every team member can work on his own, seperated branch. Additionally, files that need to be shared
can be uploaded in the workon branch. Whenever files are being pushed into the master branch, a pull request 
needs to be confirmed by the other team member. 
Therefore we create the two new branches: workLK and workAM.
----TODO and to check with Adrian. OTHER IDEAS? 


6.) Prohibit direct uploads to the master branch: owner of the repository has to follow these steps: 
https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/enabling-required-status-checks
CHECK

However, now there are only unsupervised merges prohibited. One can still push data into the master branch. 
------TO DO

7.) Problems encountered: 
- Connecting the local directory to the online repository: In my understanding after cloning the repository to the directory there should all branches from the repository be also available locally. But when we check via git branch, we encounter only a master branch. From there we cannot add files to a different branch. 
Solution: Create a branch with a name like the branch you want to push files to.

- How to edit and upload a .gitignore file: Whenever I create the .txt file and rename it respectivly, it disappears. How can I load or push the file that doesn't get displayed?
Solution: Check the introduction video once more. Create the file not via a text editor but via ```touch .gitignore```. Make the file visible in the ubuntu folder with ctrl+H. Then the file can easily be edited and is also recognised by the git status command. Now it can be edited and then uploaded.


--------
Task 2
--------



1.) What is a hash function? For what is it being used? 

2.) Difference between python modules, packages and scripts

3.) Explain DOCKER container and Volume

4.) Preference of using virtualenv vs. Docker. When would we use one or the other? 

5.) What is the Docker build contest?

6.) How can one assess the quality of a python package on PyPI?





--------
Task 3
--------- 







-----------
Notes: 
-----------


How to create a new branch and push it to github
´´´
git branch <new_branch_name>
git checkout <new_branch_name>   # or both in one line $ git checkout -b <new_branch_name> 

git push --set-upstream origin <new_branch_name>

´´´

How to delete local branch
´´´
git branch -d <branch_name>
´´´

How to delete remote branch
´´´´
git push origin --delete remoteBranchName
´´´

How to push file into certain remote branch
``
git push origin <remote_branch_name>
``` 
 

How to pull default branch
´´´
git init
git pull <url_rep>
´´´


How to pull just a single branch from github: 
```
git clone <url_rep> --branch <branchname>
```
